name: Setup repository
on:
  push:
    paths:
      - zero-project.yml
jobs:
  setup:
    name: Reinitialize repository
    runs-on: ubuntu-latest
    env:
      REPO_SETUP_TOKEN: ${{ secrets.REPO_SETUP_TOKEN }}
    steps:
      - name: Do not run scaffolding on template repository
        shell: bash
        # This workflow runs when the `zero-project.yml` file is modified.
        # This is the trick to re-init a repository, but we don't want to
        # run this action if this file is modified in the origin template repository.
        #
        # Using the GitHub rest API allows us to identify if the current repository
        # is a template repository or not.
        run: |
          curl --silent -X GET \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.baptiste-preview+json" \
            https://api.github.com/repos/$GITHUB_REPOSITORY \
            | jq --exit-status '.is_template == false';
      - uses: actions/checkout@v2
        with:
          # Comminting workflow files using the regular GITHUB_TOKEN will fail with 
          # `Git Error: Refusing to allow a GitHub App to create or update workflow without workflows permission`.
          # This is by design to prevent third-parties from adding malicious workflow files.
          #
          # Generate a new personal access token with the workflow `scope` does the trick.
          # Checkout my blog post https://stefanbuck.com/blog for alternative options
          token: ${{ secrets.REPO_SETUP_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Check name is valid [lowercase alpha-numeric and dashes]
        run: |
          cat zero-project.yml | grep -P "^name:[\s\t]+[a-z-0-9]+$" || (echo "Invalid name [lowercase alpha-numeric and dashes] only" >&2; exit 1)
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Zero
        id: install_zero
        run: |
          mkdir ${GITHUB_WORKSPACE}/bin
          cd ${GITHUB_WORKSPACE}/bin
          LATEST_ZERO_DOWNLOAD_URL=$(curl --silent "https://api.github.com/repos/commitdev/zero/releases/latest" | jq -r ".assets | .[]  | select(.name | contains(\"Linux_x86_64\")) | .browser_download_url")
          ZERO_BINARY_FILE_NAME=$(curl --silent "https://api.github.com/repos/commitdev/zero/releases/latest" | jq -r ".assets | .[]  | select(.name | contains(\"Linux_x86_64\")) | .name")
          curl -OJL $LATEST_ZERO_DOWNLOAD_URL
          tar -xvf "./${ZERO_BINARY_FILE_NAME}"
          ./zero version
          echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH
      - name: Scaffolding repository
        run: zero create

      - name: Prepare root directory
        shell: bash
        # Remove all files and folder exepct .git/ and output/
        run: |
          find ./ -maxdepth 1 \
          ! -name '.git' \
          ! -name 'output' \
          ! -name '.' \
          ! -exec rm -rf {} +
      - name: Move files to root
        shell: bash
        # The output/ folder contains a single folder which is the
        # generated project by zero. We want to move all the project
        # files into the root directory so we can reinitialize git in the next step
        run: |
          rsync -r ./output/. . && \
          rm -rf ./output/
      # rsync -r ./output/. .
      - name: Reinitialize git repository
        shell: bash
        # Reinitialize git after scaffolding this repository.
        # We use `git checkout --orphan` to create a branch in a git init-like state.
        # By force pushing this as `main` we end up with a new clean git history.
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com" && \
          git config --global user.name "github-actions[bot]" && \
          git checkout --orphan temp-branch && \
          git add . && \
          git commit -m 'Initial commit' && \
          git push origin temp-branch:main -f
